class Solution {
        public int dfs(int n1,int n2,List<Integer>[] list,int[] arr1,int k,int[] arr2) {
        int sum = 0;
        for (int i : list[n1]) {
            if (i != n2) {
                sum += dfs(i,n1,list,arr1,k,arr2);
                sum %= k; 
            }
        }
        sum += arr1[n1];
        sum %= k;
        if (sum == 0) 
            arr2[0]++;
        return sum;
    }
    
    public int maxKDivisibleComponents(int n,int[][] edges,int[] values,int k) {
        List<Integer>[] list = new ArrayList[n];
        for (int i = 0; i < n; i++) 
            list[i] = new ArrayList<>();
        for (int[] arr : edges) {
            int n1 = arr[0];
            int n2 = arr[1];
            list[n1].add(n2);
            list[n2].add(n1);
        }
        int[] arr = new int[1];
        dfs(0, -1, list, values, k, arr);
        return arr[0];
    }
}
